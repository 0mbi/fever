// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: mgmt.proto

package mgmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MgmtBloomInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasBloom  bool    `protobuf:"varint,1,opt,name=has_bloom,json=hasBloom,proto3" json:"has_bloom,omitempty"`
	Capacity  uint64  `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Elements  uint64  `protobuf:"varint,3,opt,name=elements,proto3" json:"elements,omitempty"`
	Bits      uint64  `protobuf:"varint,4,opt,name=bits,proto3" json:"bits,omitempty"`
	Hashfuncs uint64  `protobuf:"varint,5,opt,name=hashfuncs,proto3" json:"hashfuncs,omitempty"`
	Fpprob    float64 `protobuf:"fixed64,6,opt,name=fpprob,proto3" json:"fpprob,omitempty"`
}

func (x *MgmtBloomInfoResponse) Reset() {
	*x = MgmtBloomInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtBloomInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtBloomInfoResponse) ProtoMessage() {}

func (x *MgmtBloomInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtBloomInfoResponse.ProtoReflect.Descriptor instead.
func (*MgmtBloomInfoResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{0}
}

func (x *MgmtBloomInfoResponse) GetHasBloom() bool {
	if x != nil {
		return x.HasBloom
	}
	return false
}

func (x *MgmtBloomInfoResponse) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *MgmtBloomInfoResponse) GetElements() uint64 {
	if x != nil {
		return x.Elements
	}
	return 0
}

func (x *MgmtBloomInfoResponse) GetBits() uint64 {
	if x != nil {
		return x.Bits
	}
	return 0
}

func (x *MgmtBloomInfoResponse) GetHashfuncs() uint64 {
	if x != nil {
		return x.Hashfuncs
	}
	return 0
}

func (x *MgmtBloomInfoResponse) GetFpprob() float64 {
	if x != nil {
		return x.Fpprob
	}
	return 0
}

type MgmtAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alive string `protobuf:"bytes,1,opt,name=alive,proto3" json:"alive,omitempty"`
}

func (x *MgmtAliveRequest) Reset() {
	*x = MgmtAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtAliveRequest) ProtoMessage() {}

func (x *MgmtAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtAliveRequest.ProtoReflect.Descriptor instead.
func (*MgmtAliveRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{1}
}

func (x *MgmtAliveRequest) GetAlive() string {
	if x != nil {
		return x.Alive
	}
	return ""
}

type MgmtAliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Echo string `protobuf:"bytes,1,opt,name=echo,proto3" json:"echo,omitempty"`
}

func (x *MgmtAliveResponse) Reset() {
	*x = MgmtAliveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtAliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtAliveResponse) ProtoMessage() {}

func (x *MgmtAliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtAliveResponse.ProtoReflect.Descriptor instead.
func (*MgmtAliveResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{2}
}

func (x *MgmtAliveResponse) GetEcho() string {
	if x != nil {
		return x.Echo
	}
	return ""
}

type MgmtBloomAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ioc string `protobuf:"bytes,1,opt,name=ioc,proto3" json:"ioc,omitempty"`
}

func (x *MgmtBloomAddRequest) Reset() {
	*x = MgmtBloomAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtBloomAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtBloomAddRequest) ProtoMessage() {}

func (x *MgmtBloomAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtBloomAddRequest.ProtoReflect.Descriptor instead.
func (*MgmtBloomAddRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{3}
}

func (x *MgmtBloomAddRequest) GetIoc() string {
	if x != nil {
		return x.Ioc
	}
	return ""
}

type MgmtBloomAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Added uint64 `protobuf:"varint,1,opt,name=added,proto3" json:"added,omitempty"`
}

func (x *MgmtBloomAddResponse) Reset() {
	*x = MgmtBloomAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtBloomAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtBloomAddResponse) ProtoMessage() {}

func (x *MgmtBloomAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtBloomAddResponse.ProtoReflect.Descriptor instead.
func (*MgmtBloomAddResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{4}
}

func (x *MgmtBloomAddResponse) GetAdded() uint64 {
	if x != nil {
		return x.Added
	}
	return 0
}

var File_mgmt_proto protoreflect.FileDescriptor

var file_mgmt_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x67,
	0x6d, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb6, 0x01, 0x0a, 0x15, 0x4d, 0x67, 0x6d, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73,
	0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x62, 0x69,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x61, 0x73, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x70, 0x70, 0x72, 0x6f, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x66, 0x70, 0x70, 0x72, 0x6f, 0x62, 0x22, 0x28, 0x0a, 0x10, 0x4d, 0x67, 0x6d, 0x74,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x4d, 0x67, 0x6d, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x22, 0x27, 0x0a, 0x13, 0x4d,
	0x67, 0x6d, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x6f, 0x63, 0x22, 0x2c, 0x0a, 0x14, 0x4d, 0x67, 0x6d, 0x74, 0x42, 0x6c, 0x6f, 0x6f,
	0x6d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x32, 0xca, 0x02, 0x0a, 0x0b, 0x4d, 0x67, 0x6d, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x4d, 0x67, 0x6d, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x4d, 0x67, 0x6d, 0x74, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09,
	0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x4d, 0x67, 0x6d, 0x74, 0x42, 0x6c, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x12, 0x19, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x4d, 0x67, 0x6d, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x4d, 0x67, 0x6d,
	0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x53, 0x61, 0x76, 0x65,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x3d, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42,
	0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x43,
	0x53, 0x4f, 0x2f, 0x66, 0x65, 0x76, 0x65, 0x72, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mgmt_proto_rawDescOnce sync.Once
	file_mgmt_proto_rawDescData = file_mgmt_proto_rawDesc
)

func file_mgmt_proto_rawDescGZIP() []byte {
	file_mgmt_proto_rawDescOnce.Do(func() {
		file_mgmt_proto_rawDescData = protoimpl.X.CompressGZIP(file_mgmt_proto_rawDescData)
	})
	return file_mgmt_proto_rawDescData
}

var file_mgmt_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_mgmt_proto_goTypes = []interface{}{
	(*MgmtBloomInfoResponse)(nil), // 0: mgmt.MgmtBloomInfoResponse
	(*MgmtAliveRequest)(nil),      // 1: mgmt.MgmtAliveRequest
	(*MgmtAliveResponse)(nil),     // 2: mgmt.MgmtAliveResponse
	(*MgmtBloomAddRequest)(nil),   // 3: mgmt.MgmtBloomAddRequest
	(*MgmtBloomAddResponse)(nil),  // 4: mgmt.MgmtBloomAddResponse
	(*emptypb.Empty)(nil),         // 5: google.protobuf.Empty
}
var file_mgmt_proto_depIdxs = []int32{
	1, // 0: mgmt.MgmtService.Alive:input_type -> mgmt.MgmtAliveRequest
	5, // 1: mgmt.MgmtService.BloomInfo:input_type -> google.protobuf.Empty
	3, // 2: mgmt.MgmtService.BloomAdd:input_type -> mgmt.MgmtBloomAddRequest
	5, // 3: mgmt.MgmtService.BloomSave:input_type -> google.protobuf.Empty
	5, // 4: mgmt.MgmtService.BloomReload:input_type -> google.protobuf.Empty
	2, // 5: mgmt.MgmtService.Alive:output_type -> mgmt.MgmtAliveResponse
	0, // 6: mgmt.MgmtService.BloomInfo:output_type -> mgmt.MgmtBloomInfoResponse
	4, // 7: mgmt.MgmtService.BloomAdd:output_type -> mgmt.MgmtBloomAddResponse
	5, // 8: mgmt.MgmtService.BloomSave:output_type -> google.protobuf.Empty
	5, // 9: mgmt.MgmtService.BloomReload:output_type -> google.protobuf.Empty
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mgmt_proto_init() }
func file_mgmt_proto_init() {
	if File_mgmt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mgmt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtBloomInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtAliveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtBloomAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtBloomAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mgmt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mgmt_proto_goTypes,
		DependencyIndexes: file_mgmt_proto_depIdxs,
		MessageInfos:      file_mgmt_proto_msgTypes,
	}.Build()
	File_mgmt_proto = out.File
	file_mgmt_proto_rawDesc = nil
	file_mgmt_proto_goTypes = nil
	file_mgmt_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MgmtServiceClient is the client API for MgmtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MgmtServiceClient interface {
	Alive(ctx context.Context, in *MgmtAliveRequest, opts ...grpc.CallOption) (*MgmtAliveResponse, error)
	BloomInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MgmtBloomInfoResponse, error)
	BloomAdd(ctx context.Context, opts ...grpc.CallOption) (MgmtService_BloomAddClient, error)
	BloomSave(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BloomReload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mgmtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtServiceClient(cc grpc.ClientConnInterface) MgmtServiceClient {
	return &mgmtServiceClient{cc}
}

func (c *mgmtServiceClient) Alive(ctx context.Context, in *MgmtAliveRequest, opts ...grpc.CallOption) (*MgmtAliveResponse, error) {
	out := new(MgmtAliveResponse)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtService/Alive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) BloomInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MgmtBloomInfoResponse, error) {
	out := new(MgmtBloomInfoResponse)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtService/BloomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) BloomAdd(ctx context.Context, opts ...grpc.CallOption) (MgmtService_BloomAddClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtService_serviceDesc.Streams[0], "/mgmt.MgmtService/BloomAdd", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtServiceBloomAddClient{stream}
	return x, nil
}

type MgmtService_BloomAddClient interface {
	Send(*MgmtBloomAddRequest) error
	CloseAndRecv() (*MgmtBloomAddResponse, error)
	grpc.ClientStream
}

type mgmtServiceBloomAddClient struct {
	grpc.ClientStream
}

func (x *mgmtServiceBloomAddClient) Send(m *MgmtBloomAddRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mgmtServiceBloomAddClient) CloseAndRecv() (*MgmtBloomAddResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MgmtBloomAddResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mgmtServiceClient) BloomSave(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtService/BloomSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) BloomReload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtService/BloomReload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtServiceServer is the server API for MgmtService service.
type MgmtServiceServer interface {
	Alive(context.Context, *MgmtAliveRequest) (*MgmtAliveResponse, error)
	BloomInfo(context.Context, *emptypb.Empty) (*MgmtBloomInfoResponse, error)
	BloomAdd(MgmtService_BloomAddServer) error
	BloomSave(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	BloomReload(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedMgmtServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMgmtServiceServer struct {
}

func (*UnimplementedMgmtServiceServer) Alive(context.Context, *MgmtAliveRequest) (*MgmtAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alive not implemented")
}
func (*UnimplementedMgmtServiceServer) BloomInfo(context.Context, *emptypb.Empty) (*MgmtBloomInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BloomInfo not implemented")
}
func (*UnimplementedMgmtServiceServer) BloomAdd(MgmtService_BloomAddServer) error {
	return status.Errorf(codes.Unimplemented, "method BloomAdd not implemented")
}
func (*UnimplementedMgmtServiceServer) BloomSave(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BloomSave not implemented")
}
func (*UnimplementedMgmtServiceServer) BloomReload(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BloomReload not implemented")
}

func RegisterMgmtServiceServer(s *grpc.Server, srv MgmtServiceServer) {
	s.RegisterService(&_MgmtService_serviceDesc, srv)
}

func _MgmtService_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MgmtAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtService/Alive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).Alive(ctx, req.(*MgmtAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_BloomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).BloomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtService/BloomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).BloomInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_BloomAdd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MgmtServiceServer).BloomAdd(&mgmtServiceBloomAddServer{stream})
}

type MgmtService_BloomAddServer interface {
	SendAndClose(*MgmtBloomAddResponse) error
	Recv() (*MgmtBloomAddRequest, error)
	grpc.ServerStream
}

type mgmtServiceBloomAddServer struct {
	grpc.ServerStream
}

func (x *mgmtServiceBloomAddServer) SendAndClose(m *MgmtBloomAddResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mgmtServiceBloomAddServer) Recv() (*MgmtBloomAddRequest, error) {
	m := new(MgmtBloomAddRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MgmtService_BloomSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).BloomSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtService/BloomSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).BloomSave(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_BloomReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).BloomReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtService/BloomReload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).BloomReload(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MgmtService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mgmt.MgmtService",
	HandlerType: (*MgmtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alive",
			Handler:    _MgmtService_Alive_Handler,
		},
		{
			MethodName: "BloomInfo",
			Handler:    _MgmtService_BloomInfo_Handler,
		},
		{
			MethodName: "BloomSave",
			Handler:    _MgmtService_BloomSave_Handler,
		},
		{
			MethodName: "BloomReload",
			Handler:    _MgmtService_BloomReload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BloomAdd",
			Handler:       _MgmtService_BloomAdd_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mgmt.proto",
}
