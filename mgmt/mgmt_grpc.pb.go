// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mgmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MgmtServiceClient is the client API for MgmtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgmtServiceClient interface {
	Alive(ctx context.Context, in *MgmtAliveRequest, opts ...grpc.CallOption) (*MgmtAliveResponse, error)
	BloomInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MgmtBloomInfoResponse, error)
	BloomAdd(ctx context.Context, opts ...grpc.CallOption) (MgmtService_BloomAddClient, error)
	BloomSave(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BloomReload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mgmtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtServiceClient(cc grpc.ClientConnInterface) MgmtServiceClient {
	return &mgmtServiceClient{cc}
}

func (c *mgmtServiceClient) Alive(ctx context.Context, in *MgmtAliveRequest, opts ...grpc.CallOption) (*MgmtAliveResponse, error) {
	out := new(MgmtAliveResponse)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtService/Alive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) BloomInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MgmtBloomInfoResponse, error) {
	out := new(MgmtBloomInfoResponse)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtService/BloomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) BloomAdd(ctx context.Context, opts ...grpc.CallOption) (MgmtService_BloomAddClient, error) {
	stream, err := c.cc.NewStream(ctx, &MgmtService_ServiceDesc.Streams[0], "/mgmt.MgmtService/BloomAdd", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtServiceBloomAddClient{stream}
	return x, nil
}

type MgmtService_BloomAddClient interface {
	Send(*MgmtBloomAddRequest) error
	CloseAndRecv() (*MgmtBloomAddResponse, error)
	grpc.ClientStream
}

type mgmtServiceBloomAddClient struct {
	grpc.ClientStream
}

func (x *mgmtServiceBloomAddClient) Send(m *MgmtBloomAddRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mgmtServiceBloomAddClient) CloseAndRecv() (*MgmtBloomAddResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MgmtBloomAddResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mgmtServiceClient) BloomSave(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtService/BloomSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) BloomReload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtService/BloomReload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtServiceServer is the server API for MgmtService service.
// All implementations must embed UnimplementedMgmtServiceServer
// for forward compatibility
type MgmtServiceServer interface {
	Alive(context.Context, *MgmtAliveRequest) (*MgmtAliveResponse, error)
	BloomInfo(context.Context, *emptypb.Empty) (*MgmtBloomInfoResponse, error)
	BloomAdd(MgmtService_BloomAddServer) error
	BloomSave(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	BloomReload(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedMgmtServiceServer()
}

// UnimplementedMgmtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMgmtServiceServer struct {
}

func (UnimplementedMgmtServiceServer) Alive(context.Context, *MgmtAliveRequest) (*MgmtAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alive not implemented")
}
func (UnimplementedMgmtServiceServer) BloomInfo(context.Context, *emptypb.Empty) (*MgmtBloomInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BloomInfo not implemented")
}
func (UnimplementedMgmtServiceServer) BloomAdd(MgmtService_BloomAddServer) error {
	return status.Errorf(codes.Unimplemented, "method BloomAdd not implemented")
}
func (UnimplementedMgmtServiceServer) BloomSave(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BloomSave not implemented")
}
func (UnimplementedMgmtServiceServer) BloomReload(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BloomReload not implemented")
}
func (UnimplementedMgmtServiceServer) mustEmbedUnimplementedMgmtServiceServer() {}

// UnsafeMgmtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtServiceServer will
// result in compilation errors.
type UnsafeMgmtServiceServer interface {
	mustEmbedUnimplementedMgmtServiceServer()
}

func RegisterMgmtServiceServer(s grpc.ServiceRegistrar, srv MgmtServiceServer) {
	s.RegisterService(&MgmtService_ServiceDesc, srv)
}

func _MgmtService_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MgmtAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtService/Alive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).Alive(ctx, req.(*MgmtAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_BloomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).BloomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtService/BloomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).BloomInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_BloomAdd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MgmtServiceServer).BloomAdd(&mgmtServiceBloomAddServer{stream})
}

type MgmtService_BloomAddServer interface {
	SendAndClose(*MgmtBloomAddResponse) error
	Recv() (*MgmtBloomAddRequest, error)
	grpc.ServerStream
}

type mgmtServiceBloomAddServer struct {
	grpc.ServerStream
}

func (x *mgmtServiceBloomAddServer) SendAndClose(m *MgmtBloomAddResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mgmtServiceBloomAddServer) Recv() (*MgmtBloomAddRequest, error) {
	m := new(MgmtBloomAddRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MgmtService_BloomSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).BloomSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtService/BloomSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).BloomSave(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_BloomReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).BloomReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtService/BloomReload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).BloomReload(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtService_ServiceDesc is the grpc.ServiceDesc for MgmtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mgmt.MgmtService",
	HandlerType: (*MgmtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alive",
			Handler:    _MgmtService_Alive_Handler,
		},
		{
			MethodName: "BloomInfo",
			Handler:    _MgmtService_BloomInfo_Handler,
		},
		{
			MethodName: "BloomSave",
			Handler:    _MgmtService_BloomSave_Handler,
		},
		{
			MethodName: "BloomReload",
			Handler:    _MgmtService_BloomReload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BloomAdd",
			Handler:       _MgmtService_BloomAdd_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mgmt.proto",
}
